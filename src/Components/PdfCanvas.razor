@inject IJSRuntime JsRuntime

<FluentCard>
    <FluentToolbar>
        <FluentLabel Typo="Typography.Body" Weight="FontWeight.Bold">Document preview</FluentLabel>
        <FluentBadge BackgroundColor="var(--accent-fill-rest)" Color="white">sample-invoice.pdf</FluentBadge>
    </FluentToolbar>

    <div
        style="position: relative;
           width: 100%; height: 100%; 
           margin: 25px auto;
           background: var(--neutral-layer-2); 
           border: 1px solid var(--neutral-stroke-rest); border-radius: 4px; 
           overflow: hidden;">

        <canvas id="pdfCanvas"
                @onmousedown="OnMouseDown"
                @onmousemove="OnMouseMove"
                @onmouseup="OnMouseUp"
                style="position: absolute; top: 0; left: 0; z-index: 1; cursor: crosshair;"></canvas>

        <canvas id="overlayCanvas"
                style="position: absolute; top: 0; left: 0; z-index: 2; pointer-events: none;"></canvas>

    </div>

</FluentCard>

@code {


    [Parameter] public List<DocumentSelection> Selections { get; set; } = [];
    [Parameter] public EventCallback<CanvasSelection> OnDraw { get; set; }
    [Parameter] public EventCallback OnDrawnEnd { get; set; }

    private bool _isDrawing = false;
    private Point _canvasStart = new Point(0, 0);
    private Point _canvasEnd = new Point(0, 0);

    public async Task InitializePdf(string pdfPath)
    {
        await JsRuntime.InvokeVoidAsync("initializePdfViewer", pdfPath);
    }

    private async Task OnMouseDown(MouseEventArgs e)
    {
        _isDrawing = true;

        // Position and dimensions of the PDF previewer/overlay canvas
        var overlay = await JsRuntime.InvokeAsync<BoundingRect>("getCanvasRect", "overlayCanvas");

        // Canvas starting coordinates
        _canvasStart = new Point()
        {
            X = (int)e.ClientX - (int)overlay.Left,
            Y = (int)e.ClientY - (int)overlay.Top
        };

        // Build the canvas selection coordinates
        var selection = (_canvasStart, _canvasEnd).AsCanvasSelectionCoordinates();

        // Notify parent component about the start of the selection
        await OnDraw.InvokeAsync(selection);
    }

    private async Task OnMouseMove(MouseEventArgs e)
    {
        if (!_isDrawing) return;

        var overlay = await JsRuntime.InvokeAsync<BoundingRect>("getCanvasRect", "overlayCanvas");

        // Canvas current coordinates
        _canvasEnd = new Point()
        {
            X = (int)e.ClientX - (int)overlay.Left,
            Y = (int)e.ClientY - (int)overlay.Top
        };

        // Build the canvas selection coordinates
        var selection = (_canvasStart, _canvasEnd).AsCanvasSelectionCoordinates();

        // Draw the selection on the canvas
        await JsRuntime.InvokeVoidAsync("drawBoundingBox", selection);

        // Notify parent component about the current selection
        await OnDraw.InvokeAsync(selection);
    }

    private async Task OnMouseUp(MouseEventArgs e)
    {
        _isDrawing = false;
        await OnDrawnEnd.InvokeAsync();
    }

    public async Task RedrawSelections()
    {
        await JsRuntime.InvokeVoidAsync("clearBoundingBoxes");

        foreach (var selection in Selections)
        {
            await JsRuntime.InvokeVoidAsync("drawSavedBoundingBox", selection.CanvasSelection, selection.Name);
        }
    }

    public async Task HighlightSelection(DocumentSelection selection)
    {
        await JsRuntime.InvokeVoidAsync("clearBoundingBoxes");
        await RedrawSelections();
        await JsRuntime.InvokeVoidAsync("highlightBoundingBox", selection.CanvasSelection, selection.Name);
    }

    public async Task<int> GetPdfHeight()
    {
        var overlay = await JsRuntime.InvokeAsync<BoundingRect>("getCanvasRect", "overlayCanvas");
        var pdfHeight = (int)overlay.Height;
        return pdfHeight;
    }

    public class BoundingRect
    {
        public double Left { get; set; }
        public double Top { get; set; }
        public double Width { get; set; }
        public double Height { get; set; }
    }

}
