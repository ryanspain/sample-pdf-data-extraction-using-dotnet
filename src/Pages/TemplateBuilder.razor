@page "/"
@page "/{TemplateId}"

@inject TemplateRepository TemplateRepository

<PageTitle>PDF data extraction demo</PageTitle>

<FluentStack Orientation="Orientation.Horizontal" Style="height: 100%;">

    <!-- PDF canvas -->
    <FluentStack Orientation="Orientation.Vertical"
                 VerticalGap="25"
                 Style="width: 100%; margin: 5px">

            <PdfCanvas @ref="_pdfViewer"
                       Selections="_documentSelections"
                       OnDraw="HandleDraw"/>

    </FluentStack>

    <!-- Template controls -->
    <FluentStack Orientation="Orientation.Vertical"
                 VerticalGap="25"
                 Style="width: 500px; margin: 5px">

        @if (_template is not null)
        {
            <TemplateForm Template="_template"
                          OnSave="HandleTemplateSaveClicked"/>
        }

        <DocumentSelectionForm DocumentSelection="_activeDocumentSelection"
                               OnSave="HandleSelectionSaveClicked"
                               OnCancel="HandleSelectionCancelClicked"/>

        <DocumentSelectionsList DocumentSelections="_documentSelections"
                                OnEdit="HandleSelectionEditClicked"
                                OnDelete="HandleSelectionDeleteClicked"
                                OnExtract="OnDataExtracted"/>

    </FluentStack>
</FluentStack>

@code {

    [Parameter] public string? TemplateId { get; set; }

    private Template? _template;

    private PdfCanvas? _pdfViewer;
    private DocumentSelection _activeDocumentSelection = new();
    private List<DocumentSelection> _documentSelections = [];

    protected override async Task OnParametersSetAsync()
    {
        if (!string.IsNullOrEmpty(TemplateId))
        {
            // Load existing template
            _template = await TemplateRepository.Get(TemplateId);
        }

        // If no ID was provided or the template was not found, create a new one.
        _template ??= new Template
        {
            Id = Guid.NewGuid().ToString()
        };
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && _pdfViewer != null)
        {
            await _pdfViewer.InitializePdf("sample-invoice.pdf");
        }
    }

    private void HandleDraw(CanvasSelection canvasSelection)
    {
        var newDocumentSelection = new DocumentSelection
        {
            Id = _activeDocumentSelection.Id,
            Name = _activeDocumentSelection.Name,
            CanvasSelection = canvasSelection
        };

        _activeDocumentSelection = newDocumentSelection;

        StateHasChanged();
    }

    /* Templates */
    private async Task HandleTemplateSaveClicked(Template template)
    {
        await TemplateRepository.Save(template);
    }

    /* Document selections */
    private async Task HandleSelectionSaveClicked(DocumentSelection selection)
    {
        if (_pdfViewer == null) return;

        var existingSelection = _documentSelections.FirstOrDefault(b => b.Id == selection.Id);

        if (existingSelection is null)
        {
            var pdfHeight = await _pdfViewer.GetPdfHeight();

            selection.Id = Guid.NewGuid().ToString();
            selection.PdfSelection = selection.CanvasSelection.ToPdfSelectionCoordinates(pdfHeight);

            _documentSelections.Add(selection);
        }
        else
        {
            var pdfHeight = await _pdfViewer.GetPdfHeight();

            existingSelection.Name = selection.Name;
            existingSelection.CanvasSelection = selection.CanvasSelection;
            existingSelection.PdfSelection = selection.CanvasSelection.ToPdfSelectionCoordinates(pdfHeight);
        }

        _activeDocumentSelection = new DocumentSelection();
        await _pdfViewer.RedrawSelections();
        StateHasChanged();
    }

    private async Task HandleSelectionEditClicked(DocumentSelection selection)
    {
        if (_pdfViewer == null) return;

        _activeDocumentSelection = selection;
        await _pdfViewer.HighlightSelection(selection);
        StateHasChanged();
    }

    private async Task HandleSelectionDeleteClicked(DocumentSelection selection)
    {
        if (_pdfViewer == null) return;

        _documentSelections.Remove(selection);

        // If we're currently editing this selection, clear the editing state
        if (_activeDocumentSelection.Id == selection.Id)
        {
            _activeDocumentSelection = new DocumentSelection();
        }

        await _pdfViewer.RedrawSelections();
        StateHasChanged();
    }

    private async Task HandleSelectionCancelClicked()
    {
        if (_pdfViewer == null) return;

        _activeDocumentSelection = new DocumentSelection();
        await _pdfViewer.RedrawSelections();
        StateHasChanged();
    }

    /* Misc. */
    private async Task OnDataExtracted()
    {
        // This method is called after data extraction is complete
        // Can be used for any additional processing or notifications
        StateHasChanged();
    }

}
