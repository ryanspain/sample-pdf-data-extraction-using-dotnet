@page "/templates"

@inject TemplateRepository TemplateRepository
@inject NavigationManager NavigationManager

<PageTitle>Templates</PageTitle>

<FluentStack HorizontalAlignment="HorizontalAlignment.Center" Style="width: 100%;">
    <div style="padding: 20px; width: 100%; max-width: 960px;">
        <FluentCard Style="padding: 1rem;">

            @* Templates list and actions *@
            <FluentDataGrid Items="@_templates.AsQueryable()" TGridItem="Template" RowSize="DataGridRowSize.Medium">
                <PropertyColumn Property="@(p => p.Id)" Sortable="true"/>
                <PropertyColumn Property="@(p => p.Name)" Sortable="true"/>
                <PropertyColumn Property="@(p => p.Description)" Sortable="true"/>
                <TemplateColumn Title="Actions" Align="@Align.End" Width="40%">

                    @* Edit button and tooltip *@
                    <FluentButton Id="edit"
                                  IconEnd="@(new Icons.Regular.Size16.Edit())"
                                  OnClick="@(() => NavigationManager.NavigateTo(context.Id))"/>

                    @* Delete button*@
                    <FluentButton Id="delete"
                                  IconEnd="@(new Icons.Regular.Size16.Delete())"
                                  OnClick="@(() => HandleDeleteClicked(context.Id))"/>

                </TemplateColumn>
            </FluentDataGrid>

        </FluentCard>
    </div>
</FluentStack>

@code {
    private List<Template> _templates = [];

    protected override async Task OnInitializedAsync()
    {
        _templates = await TemplateRepository.GetAll();
    }

    private async Task HandleDeleteClicked(string id)
    {
        await TemplateRepository.Delete(id);
        _templates = await TemplateRepository.GetAll();
    }

}